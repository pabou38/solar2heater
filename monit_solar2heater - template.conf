
# mv to /etc/monit/conf.d

# -t : test
# -c : config file

#sudo monit -t -c monitrc   # -t to check syntext
#sudo monit -t -c conf.d/blabla.conf  # to check syntext


# monit
# start start/stop/restart/monitor/unmonitor all/<service>
# status
# summary
# report up/down/initializing/unmonitored/total
# reload

##########################################
# PABOU. system specific
##########################################

#Monit will log status and error messages to a file or via syslog. 
#Use the set log statement in the monitrc control file.
#To setup Monit to log to its own file, use e.g. set log /var/log/monit.log. 

set log /home/pi/ramdisk/monit.log

# 465 ssl, 587 tsl
set mailserver  smtp.gmail.com  port 587        
username "NAME"  password "PASS"
using tls


set mail-format {
      from: NAME@gmail.com
      subject: MONIT: $SERVICE $EVENT at $DATE
      message: Monit did action: $ACTION for service: $SERVICE at $DATE on host: $HOST.
      event is $EVENT, description is $DESCRIPTION
}


#set alert foo@bar only on { timeout, nonexist }
#set alert foo@bar but not on { instance }
#set alert foo@bar { nonexist, timeout, resource, icmp, connection }
#set alert security@bar on { checksum, permission, uid, gid }
#set alert admin@bar

# alert foo@bar with reminder on 10 cycles
# noalert foo@bar

# global alert. whenever any event occurs on any service
set alert NAME@gmail.com with reminder on 5 cycles


# and, use are just for readability

# ADDRESS make Monit listen on a specific interface only. For example if you don't want to expose Monit's web interface to the network, bind it to localhost only. Monit will accept connections on any addresses if the ADDRESS option is not used:
# Access to the Monit web interface is controlled primarily via the ALLOW option which is used to specify authentication and authorise only specific clients to connect.
# Monit maintains an access-control list of hosts and networks allowed to connect. You can add as many hosts as you want to, but only hosts with a valid domain name or its IP address are allowed.
# Clients, not mentioned in the allow list and trying to connect to Monit will be denied access and are logged with their IP-address.


set httpd port 2812 and
#address 0.0.0.0  # allow connections on all adapters
#     use address 127.0.0.1  # only accept connection from localhost (drop if you use M/Monit)
#     allow 0.0.0.0/24        # Clients, not mentioned in the allow list and trying to connect to Monit will be denied access a
     allow admin:PASS      # If the Monit command line interface is being used, at least one cleartext password is necessary (see below), otherwise the Monit command line interface will not be able to connect to the Monit web interface.




# service = check <service> <unique name, freely chosen>
# 9 services: 
#process, file, fifo, filesystem, directory, 
#remote host, system, program, network, 


# Each service can have associated start, stop and restart methods which 
# Monit can use to execute action on the service.

# Monit offers several if-tests you can use in a 'check' statement to test 
# various aspects of a service.
# IF <test> THEN <action> [ELSE <action>]
# IF CHANGED <test> THEN <action>

# actions: exec, alert, stop, restart ....

# if exist . for process, file, directory, filesystem and fifo services.
# IF <resource> <operator> <value> THEN <action>  . for system and process 
# test process's filesystem read and write activity
# checksum statement may only be used in a file service
# timestamp statement may only be used in a file, fifo or directory service entry.
# size statement may only be used in a check file service entry.
# content statement can be used to incrementally test the content of a text file
# test the filesystem mount flags for changes.
# test a filesystem or a disk for space usage
# test the permissions of file objects. This test may only be used in the context of a file, fifo, directory or filesystem service types.
# monitor the owner user id (uid) of a file, fifo, directory or owner and effective user of a process
# can test the process's PID. Monit will send an alert in case the PID changed outside of Monit's control.
# uptime statement may only be used in a process and system service type context.
# test the filedescriptors usage on the system and process level.
# check the exit status of a program or a script. This test may only be used within a check program service 
# content statement can be used to test the content of a program by using regular expressions.
# check network interfaces for: Status Capacity Saturation Upload and download [bytes] Upload and download [packets]
# perform a network ping test; can only be used within a check host statement

# perform connection testing via network ports or via Unix sockets. only be used within a process or host service type context.
#   IF <FAILED|SUCCEEDED>  if failed port 1883 protocol mqtt then alert



###############
# PROCESS
##############

# 2473 /usr/bin/python3 /home/pi/solar2heater/solar2heater.py


# CHECK PROCESS <unique name> <PIDFILE <path> | MATCHING <regex>>

#<regex> is an alternative to using PID files and uses process name pattern 
#matching to find the process to monitor. The top-most matching parent with 
#highest uptime is selected, so this form of check is most useful if the 
#process name is unique. Pid-file should be used where possible as it defines 
#expected PID exactly. 

#You can test if a process match a pattern from the command-line using 
#monit procmatch "regex-pattern". 
#This will lists all processes matching or not, the regex-pattern.


# nano monit_solar2heater.conf will match
check process solar2heater MATCHING "solar2heater"
   start program = "/bin/systemctl start solear2heater"
   stop  program = "/bin/systemctl stop solear2heater"
   if 2 restarts within 4 cycles then alert
   if cpu > 70% for 5 cycles then restart


###############
# HOST
##############

check host google with address 8.8.8.8
    if failed ping4 count 5 then alert
    
check host box with address 192.168.1.1
    if failed ping4 then alert

check host cloud with address 192.168.1.206
    if failed ping4 then alert
    # local alert
    alert NAME@gmail.com



###############
# SYSTEM
##############

check system pi_solar2heater
    if loadavg (1min) > 6 then alert
    if loadavg (5min) > 4 then alert
    if cpu usage > 80% for 10 cycles then alert
    if memory usage > 75% then alert
    if swap usage > 75% then alert


###############
# NETWORK
##############

check network wlan0 with interface wlan0
#    if link down then alert
    if failed link then alert
    if changed link then alert
    if saturation > 90% then alert
    if download > 10 MB/s then alert
    if total uploaded > 1 GB in last hour then alert  

###############
# FILESYSTEM
##############

# <path> is the path to the device/disk, mount point or NFS/CIFS/FUSE connection string
check filesystem root_filesystem with path /
#    start program  = "/bin/mount /data"
#    stop program  = "/bin/umount /data"
#    if failed permission 660 then unmonitor
#    if failed uid "root" then unmonitor
#    if failed gid "disk" then unmonitor
    if space usage > 75% for 5 times within 15 cycles then alert
    if space usage > 95% then stop
#    if inode usage > 30000 then alert
#    if inode usage > 99% then stop
#    if read rate > 1 MB/s for 5 cycles then alert
#    if read rate > 500 operations/s for 5 cycles then alert
#    if write rate > 1 MB/s for 5 cycles then alert
#    if write rate > 500 operations/s for 5 cycles then alert
#    if service time > 10 milliseconds for 3 times within 5 cycles then alert
#    group server
#

check filesystem ramdisk with path /home/pi/ramdisk
    if space usage > 75% then alert

# check filesystem usb-key with path /dev/sdb1
#    if space usage > 75% for 5 times within 15 cycles then alert
#    if space usage > 98% then stop



#  if failed host 127.0.0.1 port 8081 protocol HTTP then alert
#  if 5 restarts within 5 cycles then exec "/sbin/reboot"
#    if cpu > 60% for 2 cycles then alert
#    if cpu > 80% for 5 cycles then restart



#    if failed port 80 protocol http with timeout 15 seconds then alert
#    if failed port 80 protocol http and request /some/path with content = "a string"
#    then alert


#check host mail-server with address mail.example.com
#if failed port 143 protocol IMAP with timeout 30 seconds then alert
#    if failed port 465 protocol SMTP with timeout 30 seconds then alert
#    if failed port 22 protocol ssh with timeout 20 seconds then alert


#check program check-mysql with path "/opt/monit/check_mysql.sh"
#     if status != 0 then exec /path/to/pushover.sh
